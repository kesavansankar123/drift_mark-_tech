{"ast":null,"code":"import _objectSpread from\"H:/drift mark tecknology internship day 1/company website drift mark task 5/my task/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// import React, { useState } from \"react\";\n// import { Form, Button, Container, Row, Col } from \"react-bootstrap\";\n// import \"bootstrap-icons/font/bootstrap-icons.css\"; // Import Bootstrap Icons\n// import \"./ContactForm.css\"; // Import custom styles for animated border\n// function ContactForm() {\n//   const initialFormState = {\n//     firstName: \"\",\n//     lastName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     message: \"\",\n//     isRobot: false,\n//   };\n//   const [formData, setFormData] = useState(initialFormState);\n//   const [errors, setErrors] = useState({});\n//   const [showPassword, setShowPassword] = useState(false); // State to toggle password visibility\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n//     if (!formData.email.trim()) {\n//       newErrors.email = \"Email is required.\";\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n//       newErrors.email = \"Enter a valid email address.\";\n//     }\n//     if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n//     if (!formData.lastName.trim()) newErrors.lastName = \"LastName is required.\";\n//     if (!formData.isRobot) newErrors.isRobot = \"You must confirm you are not a robot.\";\n//     return newErrors;\n//   };\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const validationErrors = validate();\n//     if (Object.keys(validationErrors).length > 0) {\n//       setErrors(validationErrors);\n//     } else {\n//       setErrors({});\n//       alert(\"Form submitted successfully!\");\n//       setFormData(initialFormState); // Clear the input fields after submission\n//     }\n//   };\n//   const handleChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: type === \"checkbox\" ? checked : value,\n//     });\n//   };\n//   return (\n//     <Container>\n//       <div className=\"form-container\">\n//         <Form onSubmit={handleSubmit} >\n//           {/* Input Fields */}\n//           {[\n//             { label: \"First Name\", name: \"firstName\", required: true },\n//             { label: \"Last Name\", name: \"lastName\", required: true },\n//             { label: \"Email\", name: \"email\", required: true },\n//           ].map(({ label, name, required }, index) => (\n//             <Form.Group controlId={name} key={index} className=\"mb-3\">\n//               <Form.Label style={{ color: \"blue\" }}>\n//                 {label} {required && <span style={{ color: \"red\" }}>*</span>}\n//               </Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 name={name}\n//                 value={formData[name]}\n//                 onChange={handleChange}\n//                 placeholder={`Enter ${label.toLowerCase()}`}\n//                 style={{\n//                   borderColor: errors[name] ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                 }}\n//               />\n//               {errors[name] && (\n//                 <Form.Text className=\"text-danger\">{errors[name]}</Form.Text>\n//               )}\n//             </Form.Group>\n//           ))}\n//           {/* Password Field with Eye Icon */}\n//           <Form.Group controlId=\"password\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"blue\" }}>\n//               Password <span style={{ color: \"red\" }}>*</span>\n//             </Form.Label>\n//             <div style={{ position: \"relative\" }}>\n//               <Form.Control\n//                 type={showPassword ? \"text\" : \"password\"}\n//                 name=\"password\"\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 placeholder=\"Enter password\"\n//                 style={{\n//                   borderColor: errors.password ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                   paddingRight: \"40px\", // Extra space for the icon\n//                 }}\n//               />\n//               <i\n//                 className={`bi ${showPassword ? \"bi-eye-fill\" : \"bi-eye-slash-fill\"}`}\n//                 onClick={() => setShowPassword(!showPassword)}\n//                 style={{\n//                   position: \"absolute\",\n//                   top: \"50%\",\n//                   right: \"10px\",\n//                   transform: \"translateY(-50%)\",\n//                   cursor: \"pointer\",\n//                   fontSize: \"1.2rem\",\n//                   color: \"gray\",\n//                 }}\n//                 title={showPassword ? \"Hide Password\" : \"Show Password\"}\n//               />\n//             </div>\n//             {errors.password && (\n//               <Form.Text className=\"text-danger\">{errors.password}</Form.Text>\n//             )}\n//           </Form.Group>\n//           {/* Message Field */}\n//           <Form.Group controlId=\"message\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"vilot\" }}>\n//               Message (Optional)\n//             </Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               name=\"message\"\n//               value={formData.message}\n//               onChange={handleChange}\n//               placeholder=\"Enter your message\"\n//               style={{\n//                 borderColor: errors.message ? \"red\" : \"skyblue\",\n//                 borderWidth: \"2px\",\n//               }}\n//             />\n//             {errors.message && (\n//               <Form.Text className=\"text-danger\">{errors.message}</Form.Text>\n//             )}\n//           </Form.Group>\n//           {/* \"I am not a robot\" Section */}\n//           <Form.Group controlId=\"robotCheck\" className=\"mb-4\">\n//             <Row className=\"align-items-center\">\n//               <Col xs=\"auto\">\n//                 <Form.Check\n//                   type=\"checkbox\"\n//                   name=\"isRobot\"\n//                   checked={formData.isRobot}\n//                   onChange={handleChange}\n//                   className=\"me-2\"\n//                 />\n//               </Col>\n//               <Col>\n//                 <Form.Label className=\"mb-0\">I am not a robot</Form.Label>\n//               </Col>\n//             </Row>\n//             {errors.isRobot && (\n//               <Form.Text className=\"text-danger\">{errors.isRobot}</Form.Text>\n//             )}\n//           </Form.Group>\n//           {/* Submit Button */}\n//           <Button className=\"btn btn-primary btn-lg\"  type=\"submit\">\n//             Submit\n//           </Button>\n//         </Form>\n//       </div>\n//     </Container>\n//   );\n// }\n// export default ContactForm;\nimport React,{useState}from\"react\";import{Form,Button,Container,Row,Col}from\"react-bootstrap\";import\"bootstrap-icons/font/bootstrap-icons.css\";// Import Bootstrap Icons\nimport\"./ContactForm.css\";// Import custom styles for animated border\n// import Contact from \"./Contact\";\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ContactForm(){const initialFormState={firstName:\"\",lastName:\"\",email:\"\",password:\"\",message:\"\",isRobot:false};const[formData,setFormData]=useState(initialFormState);const[errors,setErrors]=useState({});const[showPassword,setShowPassword]=useState(false);// State to toggle password visibility\nconst validate=()=>{const newErrors={};if(!formData.firstName.trim())newErrors.firstName=\"First name is required.\";if(!formData.email.trim()){newErrors.email=\"Email is required.\";}else if(!/\\S+@\\S+\\.\\S+/.test(formData.email)){newErrors.email=\"Enter a valid email address.\";}if(!formData.password.trim())newErrors.password=\"Password is required.\";if(!formData.lastName.trim())newErrors.lastName=\"LastName is required.\";if(!formData.isRobot)newErrors.isRobot=\"You must confirm you are not a robot.\";return newErrors;};const handleSubmit=e=>{e.preventDefault();const validationErrors=validate();if(Object.keys(validationErrors).length>0){setErrors(validationErrors);}else{setErrors({});alert(\"Form submitted successfully!\");setFormData(initialFormState);// Clear the input fields after submission\n}};const handleChange=e=>{const{name,value,type,checked}=e.target;setFormData(_objectSpread(_objectSpread({},formData),{},{[name]:type===\"checkbox\"?checked:value}));};return/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsx(\"div\",{className:\"form-container\",children:/*#__PURE__*/_jsxs(Form,{onSubmit:handleSubmit,children:[[{label:\"First Name\",name:\"firstName\",required:true},{label:\"Last Name\",name:\"lastName\",required:true},{label:\"Email\",name:\"email\",required:true}].map((_ref,index)=>{let{label,name,required}=_ref;return/*#__PURE__*/_jsxs(Form.Group,{controlId:name,className:\"mb-3\",children:[/*#__PURE__*/_jsxs(Form.Label,{style:{color:\"blue\"},children:[label,\" \",required&&/*#__PURE__*/_jsx(\"span\",{style:{color:\"red\"},children:\"*\"})]}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",name:name,value:formData[name],onChange:handleChange,placeholder:\"Enter \".concat(label.toLowerCase()),style:{borderColor:errors[name]?\"red\":\"skyblue\",borderWidth:\"2px\"}}),errors[name]&&/*#__PURE__*/_jsx(Form.Text,{className:\"text-danger\",children:errors[name]})]},index);}),/*#__PURE__*/_jsxs(Form.Group,{controlId:\"password\",className:\"mb-3\",children:[/*#__PURE__*/_jsxs(Form.Label,{style:{color:\"blue\"},children:[\"Password \",/*#__PURE__*/_jsx(\"span\",{style:{color:\"red\"},children:\"*\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{position:\"relative\"},children:[/*#__PURE__*/_jsx(Form.Control,{type:showPassword?\"text\":\"password\",name:\"password\",value:formData.password,onChange:handleChange,placeholder:\"Enter password\",style:{borderColor:errors.password?\"red\":\"skyblue\",borderWidth:\"2px\",paddingRight:\"40px\"// Extra space for the icon\n}}),/*#__PURE__*/_jsx(\"i\",{className:\"bi \".concat(showPassword?\"bi-eye-fill\":\"bi-eye-slash-fill\"),onClick:()=>setShowPassword(!showPassword),style:{position:\"absolute\",top:\"50%\",right:\"10px\",transform:\"translateY(-50%)\",cursor:\"pointer\",fontSize:\"1.2rem\",color:\"gray\"},title:showPassword?\"Hide Password\":\"Show Password\"})]}),errors.password&&/*#__PURE__*/_jsx(Form.Text,{className:\"text-danger\",children:errors.password})]}),/*#__PURE__*/_jsxs(Form.Group,{controlId:\"message\",className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{style:{color:\"blue\"},children:\"Message (Optional)\"}),/*#__PURE__*/_jsx(Form.Control,{as:\"textarea\",rows:3,name:\"message\",value:formData.message,onChange:handleChange,placeholder:\"Enter your message\",style:{borderColor:errors.message?\"red\":\"skyblue\",borderWidth:\"2px\"}}),errors.message&&/*#__PURE__*/_jsx(Form.Text,{className:\"text-danger\",children:errors.message})]}),/*#__PURE__*/_jsxs(Form.Group,{controlId:\"robotCheck\",className:\"mb-4\",children:[/*#__PURE__*/_jsxs(Row,{className:\"align-items-center\",children:[/*#__PURE__*/_jsx(Col,{xs:\"auto\",children:/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",name:\"isRobot\",checked:formData.isRobot,onChange:handleChange,className:\"me-2\"})}),/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(Form.Label,{className:\"mb-0\",children:\"I am not a robot\"})})]}),errors.isRobot&&/*#__PURE__*/_jsx(Form.Text,{className:\"text-danger\",children:errors.isRobot})]}),/*#__PURE__*/_jsx(Button,{className:\"btn btn-primary btn-lg\",type:\"submit\",children:\"Submit\"})]})})});}export default ContactForm;","map":{"version":3,"names":["React","useState","Form","Button","Container","Row","Col","jsx","_jsx","jsxs","_jsxs","ContactForm","initialFormState","firstName","lastName","email","password","message","isRobot","formData","setFormData","errors","setErrors","showPassword","setShowPassword","validate","newErrors","trim","test","handleSubmit","e","preventDefault","validationErrors","Object","keys","length","alert","handleChange","name","value","type","checked","target","_objectSpread","children","className","onSubmit","label","required","map","_ref","index","Group","controlId","Label","style","color","Control","onChange","placeholder","concat","toLowerCase","borderColor","borderWidth","Text","position","paddingRight","onClick","top","right","transform","cursor","fontSize","title","as","rows","xs","Check"],"sources":["H:/drift mark tecknology internship day 1/company website drift mark task 5/my task/my-app/src/components/ContactForm.js"],"sourcesContent":["\n\n\n\n\n// import React, { useState } from \"react\";\n// import { Form, Button, Container, Row, Col } from \"react-bootstrap\";\n// import \"bootstrap-icons/font/bootstrap-icons.css\"; // Import Bootstrap Icons\n// import \"./ContactForm.css\"; // Import custom styles for animated border\n\n// function ContactForm() {\n//   const initialFormState = {\n//     firstName: \"\",\n//     lastName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     message: \"\",\n//     isRobot: false,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormState);\n//   const [errors, setErrors] = useState({});\n//   const [showPassword, setShowPassword] = useState(false); // State to toggle password visibility\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n//     if (!formData.email.trim()) {\n//       newErrors.email = \"Email is required.\";\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n//       newErrors.email = \"Enter a valid email address.\";\n//     }\n//     if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n//     if (!formData.lastName.trim()) newErrors.lastName = \"LastName is required.\";\n//     if (!formData.isRobot) newErrors.isRobot = \"You must confirm you are not a robot.\";\n//     return newErrors;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const validationErrors = validate();\n//     if (Object.keys(validationErrors).length > 0) {\n//       setErrors(validationErrors);\n//     } else {\n//       setErrors({});\n//       alert(\"Form submitted successfully!\");\n//       setFormData(initialFormState); // Clear the input fields after submission\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: type === \"checkbox\" ? checked : value,\n//     });\n//   };\n\n//   return (\n//     <Container>\n//       <div className=\"form-container\">\n//         <Form onSubmit={handleSubmit} >\n//           {/* Input Fields */}\n//           {[\n//             { label: \"First Name\", name: \"firstName\", required: true },\n//             { label: \"Last Name\", name: \"lastName\", required: true },\n//             { label: \"Email\", name: \"email\", required: true },\n//           ].map(({ label, name, required }, index) => (\n//             <Form.Group controlId={name} key={index} className=\"mb-3\">\n//               <Form.Label style={{ color: \"blue\" }}>\n//                 {label} {required && <span style={{ color: \"red\" }}>*</span>}\n//               </Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 name={name}\n//                 value={formData[name]}\n//                 onChange={handleChange}\n//                 placeholder={`Enter ${label.toLowerCase()}`}\n//                 style={{\n//                   borderColor: errors[name] ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                 }}\n//               />\n//               {errors[name] && (\n//                 <Form.Text className=\"text-danger\">{errors[name]}</Form.Text>\n//               )}\n//             </Form.Group>\n//           ))}\n\n//           {/* Password Field with Eye Icon */}\n//           <Form.Group controlId=\"password\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"blue\" }}>\n//               Password <span style={{ color: \"red\" }}>*</span>\n//             </Form.Label>\n//             <div style={{ position: \"relative\" }}>\n//               <Form.Control\n//                 type={showPassword ? \"text\" : \"password\"}\n//                 name=\"password\"\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 placeholder=\"Enter password\"\n//                 style={{\n//                   borderColor: errors.password ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                   paddingRight: \"40px\", // Extra space for the icon\n//                 }}\n//               />\n//               <i\n//                 className={`bi ${showPassword ? \"bi-eye-fill\" : \"bi-eye-slash-fill\"}`}\n//                 onClick={() => setShowPassword(!showPassword)}\n//                 style={{\n//                   position: \"absolute\",\n//                   top: \"50%\",\n//                   right: \"10px\",\n//                   transform: \"translateY(-50%)\",\n//                   cursor: \"pointer\",\n//                   fontSize: \"1.2rem\",\n//                   color: \"gray\",\n//                 }}\n//                 title={showPassword ? \"Hide Password\" : \"Show Password\"}\n//               />\n//             </div>\n//             {errors.password && (\n//               <Form.Text className=\"text-danger\">{errors.password}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Message Field */}\n//           <Form.Group controlId=\"message\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"vilot\" }}>\n//               Message (Optional)\n//             </Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               name=\"message\"\n//               value={formData.message}\n//               onChange={handleChange}\n//               placeholder=\"Enter your message\"\n//               style={{\n//                 borderColor: errors.message ? \"red\" : \"skyblue\",\n//                 borderWidth: \"2px\",\n//               }}\n//             />\n//             {errors.message && (\n//               <Form.Text className=\"text-danger\">{errors.message}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* \"I am not a robot\" Section */}\n//           <Form.Group controlId=\"robotCheck\" className=\"mb-4\">\n//             <Row className=\"align-items-center\">\n//               <Col xs=\"auto\">\n//                 <Form.Check\n//                   type=\"checkbox\"\n//                   name=\"isRobot\"\n//                   checked={formData.isRobot}\n//                   onChange={handleChange}\n//                   className=\"me-2\"\n//                 />\n//               </Col>\n//               <Col>\n//                 <Form.Label className=\"mb-0\">I am not a robot</Form.Label>\n//               </Col>\n//             </Row>\n//             {errors.isRobot && (\n//               <Form.Text className=\"text-danger\">{errors.isRobot}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Submit Button */}\n//           <Button className=\"btn btn-primary btn-lg\"  type=\"submit\">\n//             Submit\n//           </Button>\n//         </Form>\n//       </div>\n//     </Container>\n//   );\n// }\n\n// export default ContactForm;\n\n\n\nimport React, { useState } from \"react\";\nimport { Form, Button, Container, Row, Col } from \"react-bootstrap\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\"; // Import Bootstrap Icons\nimport \"./ContactForm.css\"; // Import custom styles for animated border\n// import Contact from \"./Contact\";\n\n\nfunction ContactForm() {\n  const initialFormState = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    message: \"\",\n    isRobot: false,\n  };\n\n  const [formData, setFormData] = useState(initialFormState);\n  const [errors, setErrors] = useState({});\n  const [showPassword, setShowPassword] = useState(false); // State to toggle password visibility\n\n  const validate = () => {\n    const newErrors = {};\n    if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n    if (!formData.email.trim()) {\n      newErrors.email = \"Email is required.\";\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = \"Enter a valid email address.\";\n    }\n    if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n    if (!formData.lastName.trim()) newErrors.lastName = \"LastName is required.\";\n    if (!formData.isRobot) newErrors.isRobot = \"You must confirm you are not a robot.\";\n    return newErrors;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const validationErrors = validate();\n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n    } else {\n      setErrors({});\n      alert(\"Form submitted successfully!\");\n      setFormData(initialFormState); // Clear the input fields after submission\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n  };\n\n  return (\n    <Container>\n      <div className=\"form-container\">\n        <Form onSubmit={handleSubmit}>\n          {/* Input Fields */}\n          {[\n            { label: \"First Name\", name: \"firstName\", required: true },\n            { label: \"Last Name\", name: \"lastName\", required: true },\n            { label: \"Email\", name: \"email\", required: true },\n          ].map(({ label, name, required }, index) => (\n            <Form.Group controlId={name} key={index} className=\"mb-3\">\n              <Form.Label style={{ color: \"blue\" }}>\n                {label} {required && <span style={{ color: \"red\" }}>*</span>}\n              </Form.Label>\n              <Form.Control\n                type=\"text\"\n                name={name}\n                value={formData[name]}\n                onChange={handleChange}\n                placeholder={`Enter ${label.toLowerCase()}`}\n                style={{\n                  borderColor: errors[name] ? \"red\" : \"skyblue\",\n                  borderWidth: \"2px\",\n                }}\n              />\n              {errors[name] && (\n                <Form.Text className=\"text-danger\">{errors[name]}</Form.Text>\n              )}\n            </Form.Group>\n          ))}\n\n          {/* Password Field with Eye Icon */}\n          <Form.Group controlId=\"password\" className=\"mb-3\">\n            <Form.Label style={{ color: \"blue\" }}>\n              Password <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <div style={{ position: \"relative\" }}>\n              <Form.Control\n                type={showPassword ? \"text\" : \"password\"}\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                placeholder=\"Enter password\"\n                style={{\n                  borderColor: errors.password ? \"red\" : \"skyblue\",\n                  borderWidth: \"2px\",\n                  paddingRight: \"40px\", // Extra space for the icon\n                }}\n              />\n              <i\n                className={`bi ${showPassword ? \"bi-eye-fill\" : \"bi-eye-slash-fill\"}`}\n                onClick={() => setShowPassword(!showPassword)}\n                style={{\n                  position: \"absolute\",\n                  top: \"50%\",\n                  right: \"10px\",\n                  transform: \"translateY(-50%)\",\n                  cursor: \"pointer\",\n                  fontSize: \"1.2rem\",\n                  color: \"gray\",\n                }}\n                title={showPassword ? \"Hide Password\" : \"Show Password\"}\n              />\n            </div>\n            {errors.password && (\n              <Form.Text className=\"text-danger\">{errors.password}</Form.Text>\n            )}\n          </Form.Group>\n\n          {/* Message Field */}\n          <Form.Group controlId=\"message\" className=\"mb-3\">\n            <Form.Label style={{ color: \"blue\" }}>\n              Message (Optional)\n            </Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows={3}\n              name=\"message\"\n              value={formData.message}\n              onChange={handleChange}\n              placeholder=\"Enter your message\"\n              style={{\n                borderColor: errors.message ? \"red\" : \"skyblue\",\n                borderWidth: \"2px\",\n              }}\n            />\n            {errors.message && (\n              <Form.Text className=\"text-danger\">{errors.message}</Form.Text>\n            )}\n          </Form.Group>\n\n          {/* \"I am not a robot\" Section */}\n          <Form.Group controlId=\"robotCheck\" className=\"mb-4\">\n            <Row className=\"align-items-center\">\n              <Col xs=\"auto\">\n                <Form.Check\n                  type=\"checkbox\"\n                  name=\"isRobot\"\n                  checked={formData.isRobot}\n                  onChange={handleChange}\n                  className=\"me-2\"\n                />\n              </Col>\n              <Col>\n                <Form.Label className=\"mb-0\">I am not a robot</Form.Label>\n              </Col>\n            </Row>\n            {errors.isRobot && (\n              <Form.Text className=\"text-danger\">{errors.isRobot}</Form.Text>\n            )}\n          </Form.Group>\n\n          {/* Submit Button */}\n          <Button className=\"btn btn-primary btn-lg\" type=\"submit\">\n            Submit\n          </Button>\n        </Form>\n      </div>  \n    </Container>\n  );\n}\n\nexport default ContactForm;\n"],"mappingsvC,OAASC,IAAI,CAAEC,MAAM,CAAEC,SAAS,CAAEC,GAAG,CAAEC,GAAG,KAAQ,iBAAiB,CACnE,MAAO,0CAA0C,CAAE;AACnD,MAAO,mBAAmB,CAAE;AAC5B;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAGA,QAAS,CAAAC,WAAWA,CAAA,CAAG,CACrB,KAAM,CAAAC,gBAAgB,CAAG,CACvBC,SAAS,CAAE,EAAE,CACbC,QAAQ,CAAE,EAAE,CACZC,KAAK,CAAE,EAAE,CACTC,QAAQ,CAAE,EAAE,CACZC,OAAO,CAAE,EAAE,CACXC,OAAO,CAAE,KACX,CAAC,CAED,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGnB,QAAQ,CAACW,gBAAgB,CAAC,CAC1D,KAAM,CAACS,MAAM,CAAEC,SAAS,CAAC,CAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC,CACxC,KAAM,CAACsB,YAAY,CAAEC,eAAe,CAAC,CAAGvB,QAAQ,CAAC,KAAK,CAAC,CAAE;AAEzD,KAAM,CAAAwB,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,CAAAC,SAAS,CAAG,CAAC,CAAC,CACpB,GAAI,CAACP,QAAQ,CAACN,SAAS,CAACc,IAAI,CAAC,CAAC,CAAED,SAAS,CAACb,SAAS,CAAG,yBAAyB,CAC/E,GAAI,CAACM,QAAQ,CAACJ,KAAK,CAACY,IAAI,CAAC,CAAC,CAAE,CAC1BD,SAAS,CAACX,KAAK,CAAG,oBAAoB,CACxC,CAAC,IAAM,IAAI,CAAC,cAAc,CAACa,IAAI,CAACT,QAAQ,CAACJ,KAAK,CAAC,CAAE,CAC/CW,SAAS,CAACX,KAAK,CAAG,8BAA8B,CAClD,CACA,GAAI,CAACI,QAAQ,CAACH,QAAQ,CAACW,IAAI,CAAC,CAAC,CAAED,SAAS,CAACV,QAAQ,CAAG,uBAAuB,CAC3E,GAAI,CAACG,QAAQ,CAACL,QAAQ,CAACa,IAAI,CAAC,CAAC,CAAED,SAAS,CAACZ,QAAQ,CAAG,uBAAuB,CAC3E,GAAI,CAACK,QAAQ,CAACD,OAAO,CAAEQ,SAAS,CAACR,OAAO,CAAG,uCAAuC,CAClF,MAAO,CAAAQ,SAAS,CAClB,CAAC,CAED,KAAM,CAAAG,YAAY,CAAIC,CAAC,EAAK,CAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB,KAAM,CAAAC,gBAAgB,CAAGP,QAAQ,CAAC,CAAC,CACnC,GAAIQ,MAAM,CAACC,IAAI,CAACF,gBAAgB,CAAC,CAACG,MAAM,CAAG,CAAC,CAAE,CAC5Cb,SAAS,CAACU,gBAAgB,CAAC,CAC7B,CAAC,IAAM,CACLV,SAAS,CAAC,CAAC,CAAC,CAAC,CACbc,KAAK,CAAC,8BAA8B,CAAC,CACrChB,WAAW,CAACR,gBAAgB,CAAC,CAAE;AACjC,CACF,CAAC,CAED,KAAM,CAAAyB,YAAY,CAAIP,CAAC,EAAK,CAC1B,KAAM,CAAEQ,IAAI,CAAEC,KAAK,CAAEC,IAAI,CAAEC,OAAQ,CAAC,CAAGX,CAAC,CAACY,MAAM,CAC/CtB,WAAW,CAAAuB,aAAA,CAAAA,aAAA,IACNxB,QAAQ,MACX,CAACmB,IAAI,EAAGE,IAAI,GAAK,UAAU,CAAGC,OAAO,CAAGF,KAAK,EAC9C,CAAC,CACJ,CAAC,CAED,mBACE/B,IAAA,CAACJ,SAAS,EAAAwC,QAAA,cACRpC,IAAA,QAAKqC,SAAS,CAAC,gBAAgB,CAAAD,QAAA,cAC7BlC,KAAA,CAACR,IAAI,EAAC4C,QAAQ,CAAEjB,YAAa,CAAAe,QAAA,EAE1B,CACC,CAAEG,KAAK,CAAE,YAAY,CAAET,IAAI,CAAE,WAAW,CAAEU,QAAQ,CAAE,IAAK,CAAC,CAC1D,CAAED,KAAK,CAAE,WAAW,CAAET,IAAI,CAAE,UAAU,CAAEU,QAAQ,CAAE,IAAK,CAAC,CACxD,CAAED,KAAK,CAAE,OAAO,CAAET,IAAI,CAAE,OAAO,CAAEU,QAAQ,CAAE,IAAK,CAAC,CAClD,CAACC,GAAG,CAAC,CAAAC,IAAA,CAA4BC,KAAK,OAAhC,CAAEJ,KAAK,CAAET,IAAI,CAAEU,QAAS,CAAC,CAAAE,IAAA,oBAC9BxC,KAAA,CAACR,IAAI,CAACkD,KAAK,EAACC,SAAS,CAAEf,IAAK,CAAaO,SAAS,CAAC,MAAM,CAAAD,QAAA,eACvDlC,KAAA,CAACR,IAAI,CAACoD,KAAK,EAACC,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAO,CAAE,CAAAZ,QAAA,EAClCG,KAAK,CAAC,GAAC,CAACC,QAAQ,eAAIxC,IAAA,SAAM+C,KAAK,CAAE,CAAEC,KAAK,CAAE,KAAM,CAAE,CAAAZ,QAAA,CAAC,GAAC,CAAM,CAAC,EAClD,CAAC,cACbpC,IAAA,CAACN,IAAI,CAACuD,OAAO,EACXjB,IAAI,CAAC,MAAM,CACXF,IAAI,CAAEA,IAAK,CACXC,KAAK,CAAEpB,QAAQ,CAACmB,IAAI,CAAE,CACtBoB,QAAQ,CAAErB,YAAa,CACvBsB,WAAW,UAAAC,MAAA,CAAWb,KAAK,CAACc,WAAW,CAAC,CAAC,CAAG,CAC5CN,KAAK,CAAE,CACLO,WAAW,CAAEzC,MAAM,CAACiB,IAAI,CAAC,CAAG,KAAK,CAAG,SAAS,CAC7CyB,WAAW,CAAE,KACf,CAAE,CACH,CAAC,CACD1C,MAAM,CAACiB,IAAI,CAAC,eACX9B,IAAA,CAACN,IAAI,CAAC8D,IAAI,EAACnB,SAAS,CAAC,aAAa,CAAAD,QAAA,CAAEvB,MAAM,CAACiB,IAAI,CAAC,CAAY,CAC7D,GAjB+Ba,KAkBtB,CAAC,EACd,CAAC,cAGFzC,KAAA,CAACR,IAAI,CAACkD,KAAK,EAACC,SAAS,CAAC,UAAU,CAACR,SAAS,CAAC,MAAM,CAAAD,QAAA,eAC/ClC,KAAA,CAACR,IAAI,CAACoD,KAAK,EAACC,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAO,CAAE,CAAAZ,QAAA,EAAC,WAC3B,cAAApC,IAAA,SAAM+C,KAAK,CAAE,CAAEC,KAAK,CAAE,KAAM,CAAE,CAAAZ,QAAA,CAAC,GAAC,CAAM,CAAC,EACtC,CAAC,cACblC,KAAA,QAAK6C,KAAK,CAAE,CAAEU,QAAQ,CAAE,UAAW,CAAE,CAAArB,QAAA,eACnCpC,IAAA,CAACN,IAAI,CAACuD,OAAO,EACXjB,IAAI,CAAEjB,YAAY,CAAG,MAAM,CAAG,UAAW,CACzCe,IAAI,CAAC,UAAU,CACfC,KAAK,CAAEpB,QAAQ,CAACH,QAAS,CACzB0C,QAAQ,CAAErB,YAAa,CACvBsB,WAAW,CAAC,gBAAgB,CAC5BJ,KAAK,CAAE,CACLO,WAAW,CAAEzC,MAAM,CAACL,QAAQ,CAAG,KAAK,CAAG,SAAS,CAChD+C,WAAW,CAAE,KAAK,CAClBG,YAAY,CAAE,MAAQ;AACxB,CAAE,CACH,CAAC,cACF1D,IAAA,MACEqC,SAAS,OAAAe,MAAA,CAAQrC,YAAY,CAAG,aAAa,CAAG,mBAAmB,CAAG,CACtE4C,OAAO,CAAEA,CAAA,GAAM3C,eAAe,CAAC,CAACD,YAAY,CAAE,CAC9CgC,KAAK,CAAE,CACLU,QAAQ,CAAE,UAAU,CACpBG,GAAG,CAAE,KAAK,CACVC,KAAK,CAAE,MAAM,CACbC,SAAS,CAAE,kBAAkB,CAC7BC,MAAM,CAAE,SAAS,CACjBC,QAAQ,CAAE,QAAQ,CAClBhB,KAAK,CAAE,MACT,CAAE,CACFiB,KAAK,CAAElD,YAAY,CAAG,eAAe,CAAG,eAAgB,CACzD,CAAC,EACC,CAAC,CACLF,MAAM,CAACL,QAAQ,eACdR,IAAA,CAACN,IAAI,CAAC8D,IAAI,EAACnB,SAAS,CAAC,aAAa,CAAAD,QAAA,CAAEvB,MAAM,CAACL,QAAQ,CAAY,CAChE,EACS,CAAC,cAGbN,KAAA,CAACR,IAAI,CAACkD,KAAK,EAACC,SAAS,CAAC,SAAS,CAACR,SAAS,CAAC,MAAM,CAAAD,QAAA,eAC9CpC,IAAA,CAACN,IAAI,CAACoD,KAAK,EAACC,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAO,CAAE,CAAAZ,QAAA,CAAC,oBAEtC,CAAY,CAAC,cACbpC,IAAA,CAACN,IAAI,CAACuD,OAAO,EACXiB,EAAE,CAAC,UAAU,CACbC,IAAI,CAAE,CAAE,CACRrC,IAAI,CAAC,SAAS,CACdC,KAAK,CAAEpB,QAAQ,CAACF,OAAQ,CACxByC,QAAQ,CAAErB,YAAa,CACvBsB,WAAW,CAAC,oBAAoB,CAChCJ,KAAK,CAAE,CACLO,WAAW,CAAEzC,MAAM,CAACJ,OAAO,CAAG,KAAK,CAAG,SAAS,CAC/C8C,WAAW,CAAE,KACf,CAAE,CACH,CAAC,CACD1C,MAAM,CAACJ,OAAO,eACbT,IAAA,CAACN,IAAI,CAAC8D,IAAI,EAACnB,SAAS,CAAC,aAAa,CAAAD,QAAA,CAAEvB,MAAM,CAACJ,OAAO,CAAY,CAC/D,EACS,CAAC,cAGbP,KAAA,CAACR,IAAI,CAACkD,KAAK,EAACC,SAAS,CAAC,YAAY,CAACR,SAAS,CAAC,MAAM,CAAAD,QAAA,eACjDlC,KAAA,CAACL,GAAG,EAACwC,SAAS,CAAC,oBAAoB,CAAAD,QAAA,eACjCpC,IAAA,CAACF,GAAG,EAACsE,EAAE,CAAC,MAAM,CAAAhC,QAAA,cACZpC,IAAA,CAACN,IAAI,CAAC2E,KAAK,EACTrC,IAAI,CAAC,UAAU,CACfF,IAAI,CAAC,SAAS,CACdG,OAAO,CAAEtB,QAAQ,CAACD,OAAQ,CAC1BwC,QAAQ,CAAErB,YAAa,CACvBQ,SAAS,CAAC,MAAM,CACjB,CAAC,CACC,CAAC,cACNrC,IAAA,CAACF,GAAG,EAAAsC,QAAA,cACFpC,IAAA,CAACN,IAAI,CAACoD,KAAK,EAACT,SAAS,CAAC,MAAM,CAAAD,QAAA,CAAC,kBAAgB,CAAY,CAAC,CACvD,CAAC,EACH,CAAC,CACLvB,MAAM,CAACH,OAAO,eACbV,IAAA,CAACN,IAAI,CAAC8D,IAAI,EAACnB,SAAS,CAAC,aAAa,CAAAD,QAAA,CAAEvB,MAAM,CAACH,OAAO,CAAY,CAC/D,EACS,CAAC,cAGbV,IAAA,CAACL,MAAM,EAAC0C,SAAS,CAAC,wBAAwB,CAACL,IAAI,CAAC,QAAQ,CAAAI,QAAA,CAAC,QAEzD,CAAQ,CAAC,EACL,CAAC,CACJ,CAAC,CACG,CAAC,CAEhB,CAEA,cAAe,CAAAjC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}